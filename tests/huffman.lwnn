class Main {
  def Main(ll: LinkedList, i: int, j: int, mapper: Increment, pq: PriorityQueue, h: Huffman) = {
    h := new Huffman();
    h.compress();
  }
}


class LinkedListNode {
  fields data: int, next: LinkedListNode;

  def LinkedListNode(data: int, next: LinkedListNode) = {
    self.data := data;
    self.next := next;
  }
}

class Fun {
  def apply(x: int): int = { return 0; }
}

class Increment extends Fun {
  def apply(x: int): int = { return x + 1; }
}

class LinkedList {
  fields head: LinkedListNode;

  def LinkedList(size: int, cursor: LinkedListNode, tmp: LinkedListNode) = {
    while (0 < size) {
        if (cursor = null) {
          cursor := new LinkedListNode(0, null);
          self.head := cursor;
        } else {
          tmp := new LinkedListNode(0, null);
          cursor.next := tmp;
          cursor := cursor.next;
        };
        size := size - 1;
    };
  }

  def length(count: int, cursor: LinkedListNode): int = {
    cursor := self.head;
    while (cursor != null) {
      count := count + 1;
      cursor := cursor.next;
    };
    return count;
  }

  def get(i: int, cursor: LinkedListNode): int = {
    cursor := self.head;
    while (0 < i) {
        i := i - 1;
        cursor := cursor.next;
    };
    return cursor.data;
  }

  def update(i: int, x: int, cursor: LinkedListNode) = {
    cursor := self.head;
    while (0 < i) {
        i := i - 1;
        cursor := cursor.next;
    };
    cursor.data := x;
  }

  def cons(data: int, cursor: LinkedListNode) = {
    cursor := new LinkedListNode(data, self.head);
    self.head := cursor;
  }

  def append(data: int, cursor: LinkedListNode, tmp: LinkedListNode, fresh: LinkedList): LinkedList = {
    fresh := self.copy();
    if (fresh.head = null) { 
      tmp :=  new LinkedListNode(data, null); 
      fresh.head := tmp;
    } else {
      cursor := fresh.head;
      if (cursor != null) {
        while (cursor.next != null)  {
            cursor := cursor.next;
        };
      };
      tmp := new LinkedListNode(data, null);
      if (cursor != null) { cursor.next := tmp; } else { cursor := tmp; };
    };
    return fresh;
  }

  def copy(cursor: LinkedListNode, cursor2: LinkedListNode, fresh: LinkedList, i: int): LinkedList = {
    i := self.length();
    fresh := new LinkedList(i);
    cursor := self.head;
    cursor2 := fresh.head;
    if (cursor != null) {
      while (cursor.next != null) {
        cursor2.data := cursor.data;
        cursor := cursor.next;
        cursor2 := cursor2.next;
      };
    };
    if ((cursor2 != null) & (cursor != null)) { cursor2.data := cursor.data; };
    return fresh;
  }

  def delete(slot: int, temp: LinkedListNode, count : int): int = {
    count := 0;
    temp := self.head;
    while (count != slot) {
      count := count + 1;
      temp := temp.next;
    };
    count := temp.next.data;
    temp.next := temp.next.next;
    return count;
  }

  def sort(newLL: LinkedList, len: int, i: int, elem: int, hole: int, tmp: int) = {
    len := self.length();
    i := 1;
    while (i < len) {
        elem := self.get(i);
        hole := i;
        tmp := self.get(hole - 1);
        while ((0 < hole) & (elem < tmp)) {
            tmp := self.get(hole - 1);
            self.update(hole, tmp);
            hole := hole - 1;
        };
        self.update(hole, elem);
        i := i + 1;
    };
  }

  def map(fun: Fun, len: int, cursor: LinkedListNode, value: int) = {
    len := self.length();
    cursor := self.head;
    while (0 < len) {
      value := fun.apply(cursor.data);
      cursor.data := (value);
      cursor := cursor.next;
      len := len - 1;
    };
  }
}

class TrieFun {
  def apply(x: TrieNode): TrieNode = { return x; }
}

class TrieNode {
  fields ch: int, freq: int, left: TrieNode, right: TrieNode;
  
  def TrieNode(c: int, f: int, l: TrieNode, r: TrieNode) = {
    self.ch := c;
    self.freq := f;
    self.left := l;
    self.right := r;
  }

  def isLeaf(): bool = {
    return (self.left = null) & (self.right = null);
  }
  
  def lessThan(that: TrieNode, res: int): bool = {
    return (self.freq < that.freq);
  }

  def compareTo(that: TrieNode): int = {
    return self.freq - that.freq;
  }
}

class LinkedListTrieNode {
  fields data: TrieNode, next: LinkedListTrieNode;

  def LinkedListTrieNode(data: TrieNode, next: LinkedListTrieNode) = {
    self.data := data;
    self.next := next;
  }
}

class LinkedListTrie {
  fields head: LinkedListTrieNode;

  def LinkedListTrie(size: int, cursor: LinkedListTrieNode, tmp: LinkedListTrieNode) = {
    while (0 < size) {
        if (cursor = null) {
          cursor := new LinkedListTrieNode(null, null);
          self.head := cursor;
        } else {
          tmp := new LinkedListTrieNode(null, null);
          cursor.next := tmp;
          cursor := cursor.next;
        };
        size := size - 1;
    };
  }

  def length(count: int, cursor: LinkedListTrieNode): int = {
    cursor := self.head;
    while (cursor != null) {
      count := count + 1;
      cursor := cursor.next;
    };
    return count;
  }

  def get(i: int, cursor: LinkedListTrieNode): TrieNode = {
    cursor := self.head;
    while (0 < i) {
        i := i - 1;
        cursor := cursor.next;
    };
    return cursor.data;
  }

  def update(i: int, x: TrieNode, cursor: LinkedListTrieNode) = {
    cursor := self.head;
    while (0 < i) {
        i := i - 1;
        cursor := cursor.next;
    };
    cursor.data := x;
  }

  def cons(data: TrieNode, cursor: LinkedListTrieNode) = {
    cursor := new LinkedListTrieNode(data, self.head);
    self.head := cursor;
  }

  def append(data: TrieNode , cursor: LinkedListTrieNode, tmp: LinkedListTrieNode, fresh: LinkedListTrie): LinkedListTrie = {
      fresh := self.copy();
    if (fresh.head = null) { 
      tmp :=  new LinkedListTrieNode(data, null); 
      fresh.head := tmp;
    } else {
      cursor := fresh.head;
      while ((cursor != null) & (cursor.next != null))  {
            cursor := cursor.next;
      };
      tmp := new LinkedListTrieNode(data, null);
      if (cursor != null) { cursor.next := tmp; } else { cursor := tmp; };
    };
    return fresh;
  }

  def copy(cursor: LinkedListTrieNode, cursor2: LinkedListTrieNode, fresh: LinkedListTrie, i: int): LinkedListTrie = {
    i := self.length();
    fresh := new LinkedListTrie(i);
    cursor := self.head;
    cursor2 := fresh.head;
    while ((cursor != null) & (cursor.next != null)) {
      cursor2.data := cursor.data;
      cursor := cursor.next;
      cursor2 := cursor2.next;
    };
    if ((cursor2 != null) & (cursor != null)) { cursor2.data := cursor.data; };
    return fresh;
  }

  def delete(slot: int, temp: LinkedListTrieNode, count : int, ret: TrieNode): TrieNode = {
    count := 0;
    temp := self.head;
    while (count != slot) {
      count := count + 1;
      temp := temp.next;
    };
    ret := temp.next.data;
    temp.next := temp.next.next;
    return ret;
  }

  def sort(len: int, i: int, elem: TrieNode, hole: int, tmp: TrieNode, cmp: bool, cmp2: bool) = {
    len := self.length();
    i := 1;
    while (i < len) {
        elem := self.get(i);
        hole := i;
        tmp := self.get(hole - 1);
        cmp := elem.lessThan(tmp);        
        while ((0 < hole) & cmp) {
            tmp := self.get(hole - 1);
            self.update(hole, tmp);
            hole := hole - 1;
        };
        self.update(hole, elem);
        i := i + 1;
    };
  }

  def map(fun: TrieFun, len: int, cursor: LinkedListTrieNode, value: TrieNode) = {
    len := self.length();
    cursor := self.head;
    while (0 < len) {
      value := fun.apply(cursor.data);
      cursor.data := (value);
      cursor := cursor.next;
      len := len - 1;
    };
  }
}

class PriorityQueue {
  fields seq: LinkedList, index: int;
  
  def PriorityQueue(initSize: int, tmp: LinkedList) = {
    tmp := new LinkedList(initSize);
    self.seq := tmp;
    self.index := 0;
  }
  
  def insert(item: int) = {
    self.seq.update(self.index, item);
    self.index := self.index + 1;
  }

  def remove(maxIndex: int, i: int, ae: int, ab: int, result: int): int = {
    while (i < self.index) {
      ae := self.seq.get(i);
      ab := self.seq.get(maxIndex);
      if (ae < ab) {
        maxIndex := i;
      };
      i := i + 1;
    };
    result := self.seq.get(maxIndex);

    self.index := self.index - 1;
    ab := self.seq.get(self.index);
    self.seq.update(maxIndex, ab);
    return result;
  }
}

class PriorityQueueTrie {
  fields seq: LinkedListTrie, index: int, size: int;
  
  def PriorityQueueTrie(initSize: int, tmp: LinkedListTrie) = {
    tmp := new LinkedListTrie(initSize);
    self.seq := tmp;
    self.index := 0;
    self.size := 0;
  }
  
  def insert(item: TrieNode, ll: LinkedListTrie) = {
    self.seq.update(self.index, item);
    self.index := self.index + 1;
    self.size := self.size + 1;
  }

  def remove(maxIndex: int, i: int, ae: TrieNode, ab: TrieNode, result: TrieNode, guard: bool): TrieNode = {
    while (i < self.index) {
      ae := self.seq.get(i);
      ab := self.seq.get(maxIndex);
      guard := ae.lessThan(ab);
      if (guard) {
        maxIndex := i;
      };
      i := i + 1;
    };
    result := self.seq.get(maxIndex);

    self.index := self.index - 1;
    ab := self.seq.get(self.index);
    self.seq.update(maxIndex, ab);
    return result;
  }
  
  def size(res: int): int = {
    return self.index;
  }
}

class Huffman {
  fields R: int;

  def Huffman() = {
    self.R := 256;
  }
  
  def compress(str: LinkedList, j: int, root: TrieNode, i: int, len: int, tmp: int, freq: LinkedList, es: LinkedList) = {
    str := new LinkedList(1);
    str := str.update(0, 72);
    str := str.append(101);
    str := str.append(108);
    str := str.append(108);
    str := str.append(111);
    str := str.append(32);
    str := str.append(87);
    str := str.append(111);
    str := str.append(114);
    str := str.append(108);
    str := str.append(100);
    str := str.append(33);
    str := str.append(32);
    str := str.append(72);
    str := str.append(111);
    str := str.append(119);
    str := str.append(32);
    str := str.append(105);
    str := str.append(115);
    str := str.append(32);
    str := str.append(105);
    str := str.append(116);
    str := str.append(32);
    str := str.append(103);
    str := str.append(111);
    str := str.append(105);
    str := str.append(110);
    str := str.append(103);
    str := str.append(63);

    freq := new LinkedList(256);
    len := str.length();
    
    while (i < len) {
      j := str.get(i);
      tmp := freq.get(j);
      freq.update(j, tmp + 1);
      i := i + 1;
    };

    root := self.buildTrie(freq);
    es := new LinkedList(0);
    self.buildCode(root, es);

  }

  def buildTrie(freq: LinkedList, pq: PriorityQueueTrie, i: int, tmp: int, node: TrieNode, ll: LinkedList, l: TrieNode, r: TrieNode, p: TrieNode): TrieNode = {
    pq := new PriorityQueueTrie(256);
    while (i < 256) {
      tmp := freq.get(i);
      if (0 < tmp) {
        node := new TrieNode(i, tmp, null, null);
        pq.insert(node);    
      };
      i := i + 1;
    };
    
    i := pq.size();
    while (1 < i) {
      l := pq.remove();
      r := pq.remove();
      p := new TrieNode(0, l.freq + r.freq, l, r);
      pq.insert(p);
      i := pq.size();
    };
    
    p := pq.remove();
    return p;
  }
    
  def buildCode(x: TrieNode, s: LinkedList, leaf: bool, tmp: LinkedList, tmp2: LinkedList) = {
    leaf := x.isLeaf();
    if (leaf = false) {
        tmp := s.append(0);
        self.buildCode(x.left, tmp);
        tmp2 := s.append(1);
        self.buildCode(x.right, tmp2);
    } else {

      self.printS(s);
    };
  }
  
  def printS(xs: LinkedList, i : int, len: int, r: int) = {
    len := xs.length();
    while (i < len) {
        r := xs.get(i);
        print r;
        i := i + 1;
    };
  }
}
